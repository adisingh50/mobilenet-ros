// Generated by gencpp from file mobileNet/GetDepthResponse.msg
// DO NOT EDIT!


#ifndef MOBILENET_MESSAGE_GETDEPTHRESPONSE_H
#define MOBILENET_MESSAGE_GETDEPTHRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobileNet
{
template <class ContainerAllocator>
struct GetDepthResponse_
{
  typedef GetDepthResponse_<ContainerAllocator> Type;

  GetDepthResponse_()
    : depth(0)  {
    }
  GetDepthResponse_(const ContainerAllocator& _alloc)
    : depth(0)  {
  (void)_alloc;
    }



   typedef int32_t _depth_type;
  _depth_type depth;





  typedef boost::shared_ptr< ::mobileNet::GetDepthResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileNet::GetDepthResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetDepthResponse_

typedef ::mobileNet::GetDepthResponse_<std::allocator<void> > GetDepthResponse;

typedef boost::shared_ptr< ::mobileNet::GetDepthResponse > GetDepthResponsePtr;
typedef boost::shared_ptr< ::mobileNet::GetDepthResponse const> GetDepthResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileNet::GetDepthResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileNet::GetDepthResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobileNet::GetDepthResponse_<ContainerAllocator1> & lhs, const ::mobileNet::GetDepthResponse_<ContainerAllocator2> & rhs)
{
  return lhs.depth == rhs.depth;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobileNet::GetDepthResponse_<ContainerAllocator1> & lhs, const ::mobileNet::GetDepthResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobileNet

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mobileNet::GetDepthResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileNet::GetDepthResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileNet::GetDepthResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileNet::GetDepthResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileNet::GetDepthResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileNet::GetDepthResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileNet::GetDepthResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc10fcc2de8396461f531d4f012fd660";
  }

  static const char* value(const ::mobileNet::GetDepthResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc10fcc2de839646ULL;
  static const uint64_t static_value2 = 0x1f531d4f012fd660ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileNet::GetDepthResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileNet/GetDepthResponse";
  }

  static const char* value(const ::mobileNet::GetDepthResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileNet::GetDepthResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 depth	#depth (mm) of object at image coordinates\n"
"\n"
;
  }

  static const char* value(const ::mobileNet::GetDepthResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileNet::GetDepthResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.depth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetDepthResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileNet::GetDepthResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileNet::GetDepthResponse_<ContainerAllocator>& v)
  {
    s << indent << "depth: ";
    Printer<int32_t>::stream(s, indent + "  ", v.depth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILENET_MESSAGE_GETDEPTHRESPONSE_H
